Yes, Iâ€™ve used ExecutorService in my Spring Boot microservice to handle parallel processing of independent tasks,
particularly when dealing with external API calls and batch operations.

In one of my services, I had to fetch data from multiple third-party APIs (e.g., pricing, reviews, inventory).
These APIs were independent, so instead of calling them sequentially, I used ExecutorService to call them in parallel,
 and then merged the responses.

This significantly improved performance (reduced response time from ~3s to ~1s).

ExecutorService executor = Executors.newFixedThreadPool(3);

Callable<String> callPriceAPI = () -> priceService.getPrice();
Callable<String> callReviewAPI = () -> reviewService.getReviews();
Callable<String> callInventoryAPI = () -> inventoryService.getStock();

List<Callable<String>> tasks = Arrays.asList(callPriceAPI, callReviewAPI, callInventoryAPI);

List<Future<String>> futures = executor.invokeAll(tasks);

// Collect results
List<String> responses = new ArrayList<>();
for (Future<String> future : futures) {
    responses.add(future.get());  // blocking call, but all were started in parallel
}

executor.shutdown();  // always shutdown to free threads
Reduced API response time by 2/3

Clean separation of concerns using Callable

Maintained thread safety without manual thread management

In my project, I used ExecutorService to parallelize independent API calls in a product-enrichment module.
Instead of sequentially calling multiple 3rd-party services, I submitted them as tasks and gathered the results using
invokeAll().
This drastically reduced latency and helped improve throughput.
I ensured proper cleanup by calling shutdown() after processing.