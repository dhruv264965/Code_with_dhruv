1️⃣ @ExceptionHandler (Handle Exceptions in a Single Controller)
The @ExceptionHandler annotation is used to handle exceptions within a specific controller.

Example: Using @ExceptionHandler in a Controller

@RestController
@RequestMapping("/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping("/{id}")
    public Employee getEmployeeById(@PathVariable Long id) {
        return employeeService.getEmployeeById(id)
                .orElseThrow(() -> new EmployeeNotFoundException("Employee not found with ID: " + id));
    }

    // Handle exception locally for this controller only
    @ExceptionHandler(EmployeeNotFoundException.class)
    public ResponseEntity<String> handleEmployeeNotFoundException(EmployeeNotFoundException ex) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
    }
}
Key Features of @ExceptionHandler
✔ Handles specific exceptions in a single controller
✔ Useful for controller-specific exception handling
❌ Does not apply globally across all controllers

2️⃣ @ControllerAdvice (Global Exception Handling for All Controllers)
The @ControllerAdvice annotation is used for global exception handling across multiple controllers.

Example: Global Exception Handling with @ControllerAdvice

@RestControllerAdvice
public class GlobalExceptionHandler {

    // Handles EmployeeNotFoundException globally
    @ExceptionHandler(EmployeeNotFoundException.class)
    public ResponseEntity<String> handleEmployeeNotFoundException(EmployeeNotFoundException ex) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
    }

    // Handles validation errors globally
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        for (FieldError error : ex.getBindingResult().getFieldErrors()) {
            errors.put(error.getField(), error.getDefaultMessage());
        }
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errors);
    }

    // Catch all unhandled exceptions
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGlobalExceptions(Exception ex) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred: " + ex.getMessage());
    }
}
Key Features of @ControllerAdvice
✔ Global exception handling for multiple controllers
✔ Centralized management of exception handling logic
✔ Supports multiple exception types
❌ Cannot handle exceptions locally (applies to all controllers)