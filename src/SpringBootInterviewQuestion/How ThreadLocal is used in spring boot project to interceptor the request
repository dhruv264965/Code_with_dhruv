ThreadLocal<T> is a special Java class that provides thread-local variables.
    Each thread that accesses such a variable has its own, independent copy of the variable, isolated from other threads.

ðŸ”¹ Where to Use ThreadLocal?
Use ThreadLocal when:
âœ… 1. You want to avoid sharing data between threads
Example: Each thread stores a request ID, database connection, or user session.
âœ… 2. Storing user context or transaction info
In web apps or microservices, where each request is handled by a separate thread.
âœ… 3. Avoiding synchronization for read/write access to shared data
You want thread safety without locking.

| Feature                | `ThreadLocal`                                | `synchronized`                         |
| ---------------------- | -------------------------------------------- | -------------------------------------- |
| **Thread Safety**      | Achieved by keeping local copy per thread    | Achieved by locking (mutex)            |
| **Performance**        | No locking, better performance               | Slower due to lock contention          |
| **Data Sharing**       | No data shared â€” completely isolated         | Shared data with synchronization       |
| **Use Case**           | Per-thread state like user sessions, db conn | Shared counter, shared data structures |
| **Garbage Collection** | Automatically cleaned after thread dies      | Not related                            |
If threads are reused (e.g., in thread pools), and you forget to remove(), it can lead to memory leaks.

Always clean up: threadLocal.remove();


------------------------------------------------------------------------------------------
Use in spring boot
Updated Architecture:
Request â†’ Filter (set ThreadLocal) â†’ Interceptor (log) â†’ Controller â†’ Service â†’ Repository (save with requestId)
package com.example.demo.filter;

import com.example.demo.context.ThreadLocalContext;
import org.springframework.stereotype.Component;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.UUID;

@Component
public class RequestFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        try {
            // Get request ID from header or generate new
            HttpServletRequest req = (HttpServletRequest) request;
            String requestId = req.getHeader("X-Request-ID");
            if (requestId == null || requestId.isEmpty()) {
                requestId = UUID.randomUUID().toString();
            }

            // Set in ThreadLocal
            ThreadLocalContext.setRequestId(requestId);
            chain.doFilter(request, response);
        } finally {
            // Clean up to avoid memory leaks
            ThreadLocalContext.clear();
        }
    }
}
---------------------------------------------------------------------
how i use Thread local in spring boot project

âœ… How I Used ThreadLocal in My Project
Yes, Iâ€™ve used ThreadLocal in my Spring Boot project for request tracing and logging purposes.
Specifically, I used ThreadLocal in a custom Filter to store a unique request ID for each incoming HTTP request.
 This allowed me to:
Avoid passing request ID manually across layers
Ensure thread-safe per-request data
Log and persist request context in DB for debugging or auditing

ðŸ”§ What I Did:
Created a ThreadLocalContext class
To store and retrieve the request ID per thread.
In doFilter() method:
Extracted or generated a requestId from the HTTP request.
Stored it in ThreadLocal using ThreadLocalContext.set(requestId).
Cleared it using ThreadLocalContext.clear() in the finally block to avoid memory leaks.
Interceptor used the ThreadLocal to log the request ID.
Service Layer used ThreadLocal.get() to persist the request ID in the database along with the endpoint info.

ðŸ’¡ Why I Used ThreadLocal Instead of synchronized
ThreadLocal gave me thread isolation without needing to synchronize access.
No shared state, so no locking needed.
Better performance and cleaner code, especially with Spring's layered architecture.

@Component
public class RequestFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        try {
            HttpServletRequest req = (HttpServletRequest) request;

            // 1. Get or generate request ID
            String requestId = req.getHeader("X-Request-ID");
            if (requestId == null) {
                requestId = UUID.randomUUID().toString();
            }

            // 2. Set in ThreadLocal
            ThreadLocalContext.setRequestId(requestId);

            // 3. Proceed with request
            chain.doFilter(request, response);
        } finally {
            // 4. Clear ThreadLocal to prevent memory leak
            ThreadLocalContext.clear();
        }
    }
}
In my project, I used ThreadLocal in a custom filter to assign a unique request ID to each incoming HTTP request.
 This ID was stored thread-locally so it could be accessed across different layers (interceptor, service, repository)
  without passing it explicitly. This helped me trace requests and persist logs easily and safely in a multi-threaded
  environment.




