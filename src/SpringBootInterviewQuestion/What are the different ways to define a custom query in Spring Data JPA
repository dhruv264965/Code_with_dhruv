Spring Data JPA provides several ways to define custom queries beyond the default findBy method names.
These include JPQL, Native SQL, @Query annotation, Named Queries, Criteria API, and Specification API.

1Ô∏è‚É£ Using Method Names (Derived Queries)
Spring Data JPA derives queries from method names automatically.

Example

List<Employee> findByDepartment(String department);
üîπ Generated SQL

SELECT * FROM employees WHERE department = ?;
‚úî Simple and requires no SQL
‚ùå Limited flexibility (only supports basic conditions)

2Ô∏è‚É£ Using @Query Annotation (JPQL & Native SQL)
2.1 JPQL (Java Persistence Query Language)
JPQL is database-independent and works with entity objects.

@Query("SELECT e FROM Employee e WHERE e.department = :department")
List<Employee> findEmployeesByDepartment(@Param("department") String department);
‚úî Works across different databases
‚ùå No direct access to native SQL features

2.2 Native SQL Query
For complex queries with SQL functions, use native queries.

@Query(value = "SELECT * FROM employees WHERE department = :department", nativeQuery = true)
List<Employee> findEmployeesByDepartmentNative(@Param("department") String department);
‚úî Uses full power of SQL
‚ùå Tied to a specific database