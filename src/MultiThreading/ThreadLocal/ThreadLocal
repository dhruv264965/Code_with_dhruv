ThreadLocal is a class  used to create thread-specific variables. Each thread accessing a ThreadLocal
variable gets its own independent copy, preventing data conflicts between threads.
Def->Har thread ke independent copy banana jisse data conflicts between thread na ho.
fatures-Each Thread Has Its Own Copy: Every thread gets a separate, isolated copy of the variable.
        No Synchronization Required: Since each thread has its own version, no need for locks or synchronization.
        Useful for Per-Thread State: Commonly used for user sessions, transaction contexts, and request tracing.

When to Use ThreadLocal?
✅ Thread-Specific Caching (e.g., database connections)
✅ User Authentication Data (storing user session info)
✅ Transaction Management (storing per-thread transaction states)
✅ Date Formatting (avoiding expensive SimpleDateFormat instantiation)

Final Thoughts
ThreadLocal is not a replacement for synchronized or volatile, but it helps manage per-thread state efficiently.
It is commonly used in frameworks like Spring (RequestContextHolder), Hibernate (Session management), and
Log4j (logging context).