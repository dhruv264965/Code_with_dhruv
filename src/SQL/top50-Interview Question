ðŸ”¹ Joins

1. Get employee names with their department names.

SELECT e.emp_name, d.dept_name
FROM employees e
JOIN departments d ON e.dept_id = d.dept_id;


2. List all employees even if they donâ€™t belong to a department.

SELECT e.emp_name, d.dept_name
FROM employees e
LEFT JOIN departments d ON e.dept_id = d.dept_id;


3. List all departments and employees (including departments without employees).

SELECT e.emp_name, d.dept_name
FROM employees e
RIGHT JOIN departments d ON e.dept_id = d.dept_id;


4. Find employees who donâ€™t belong to any department.

SELECT e.emp_name
FROM employees e
LEFT JOIN departments d ON e.dept_id = d.dept_id
WHERE d.dept_id IS NULL;


5. Show employees who share the same manager.

SELECT e1.emp_name, e2.emp_name AS colleague, e1.manager_id
FROM employees e1
JOIN employees e2 ON e1.manager_id = e2.manager_id
AND e1.emp_id <> e2.emp_id;

ðŸ”¹ Aggregation & GROUP BY

6. Count employees in each department.

SELECT dept_id, COUNT(*) AS emp_count
FROM employees
GROUP BY dept_id;


7. Find average salary per department.

SELECT dept_id, AVG(salary) AS avg_salary
FROM employees
GROUP BY dept_id;


8. Find the department with the highest average salary.

SELECT dept_id, AVG(salary) AS avg_salary
FROM employees
GROUP BY dept_id
ORDER BY avg_salary DESC
LIMIT 1;


9. Find departments with more than 5 employees.

SELECT dept_id, COUNT(*) AS emp_count
FROM employees
GROUP BY dept_id
HAVING COUNT(*) > 5;


10. Get max salary from each department.

SELECT dept_id, MAX(salary) AS max_salary
FROM employees
GROUP BY dept_id;

ðŸ”¹ ORDER BY

11. Get top 5 highest paid employees.

SELECT emp_name, salary
FROM employees
ORDER BY salary DESC
LIMIT 5;


12. Get employees sorted by department and salary.

SELECT emp_name, dept_id, salary
FROM employees
ORDER BY dept_id, salary DESC;


13. Find second highest salary.

SELECT MAX(salary)
FROM employees
WHERE salary < (SELECT MAX(salary) FROM employees);


14. Find Nth highest salary (example: 3rd highest).

SELECT DISTINCT salary
FROM employees e1
WHERE 3 = (
  SELECT COUNT(DISTINCT salary)
  FROM employees e2
  WHERE e2.salary >= e1.salary
);


15. Find employees with lowest salary per department.

SELECT dept_id, emp_name, salary
FROM employees e
WHERE salary = (SELECT MIN(salary) FROM employees WHERE dept_id = e.dept_id);

ðŸ”¹ Multiple Aggregations

16. Find total, average, max, min salary per department.

SELECT dept_id, SUM(salary), AVG(salary), MAX(salary), MIN(salary)
FROM employees
GROUP BY dept_id;


17. Find department with highest total salary.

SELECT dept_id, SUM(salary) AS total_salary
FROM employees
GROUP BY dept_id
ORDER BY total_salary DESC
LIMIT 1;


18. Find manager with maximum employees.

SELECT manager_id, COUNT(*) AS emp_count
FROM employees
GROUP BY manager_id
ORDER BY emp_count DESC
LIMIT 1;


19. Find employees earning more than the average salary.

SELECT emp_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);


20. Find employees earning more than their departmentâ€™s average.

SELECT emp_name, dept_id, salary
FROM employees e
WHERE salary > (
  SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id
);

ðŸ”¹ Subqueries with GROUP BY

21. Find employee with highest salary in each department.

SELECT emp_name, dept_id, salary
FROM employees e
WHERE salary = (
  SELECT MAX(salary) FROM employees WHERE dept_id = e.dept_id
);


22. Find department where average salary > 50000.

SELECT dept_id, AVG(salary) AS avg_salary
FROM employees
GROUP BY dept_id
HAVING AVG(salary) > 50000;


23. Find employees whose salary is above departmentâ€™s average.

SELECT emp_name, dept_id, salary
FROM employees e
WHERE salary > (
  SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id
);


24. Find departments where min salary < 30000.

SELECT dept_id, MIN(salary) AS min_salary
FROM employees
GROUP BY dept_id
HAVING MIN(salary) < 30000;


25. Find duplicate salaries.

SELECT salary, COUNT(*)
FROM employees
GROUP BY salary
HAVING COUNT(*) > 1;

ðŸ”¹ Tricky Join & Aggregation

26. Get employee count department-wise including 0 employees.

SELECT d.dept_name, COUNT(e.emp_id) AS emp_count
FROM departments d
LEFT JOIN employees e ON d.dept_id = e.dept_id
GROUP BY d.dept_name;


27. Find employees hired before their managers.

SELECT e.emp_name, m.emp_name AS manager_name
FROM employees e
JOIN employees m ON e.manager_id = m.emp_id
WHERE e.hire_date < m.hire_date;


28. Find employees working in the same department as â€˜Johnâ€™.

SELECT emp_name
FROM employees
WHERE dept_id = (SELECT dept_id FROM employees WHERE emp_name = 'John')
AND emp_name <> 'John';


29. Find employees not assigned to any project.

SELECT e.emp_name
FROM employees e
LEFT JOIN project_assignments p ON e.emp_id = p.emp_id
WHERE p.project_id IS NULL;


30. Find projects with more than 3 employees assigned.

SELECT project_id, COUNT(emp_id) AS emp_count
FROM project_assignments
GROUP BY project_id
HAVING COUNT(emp_id) > 3;

ðŸ”¹ Window Functions (often asked now)

31. Find rank of employees by salary.

SELECT emp_name, salary,
       RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;


32. Find top 2 salaries per department.

SELECT emp_name, dept_id, salary
FROM (
   SELECT emp_name, dept_id, salary,
          DENSE_RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) AS rnk
   FROM employees
) t
WHERE rnk <= 2;


33. Running total of salary ordered by hire date.

SELECT emp_name, hire_date, salary,
       SUM(salary) OVER (ORDER BY hire_date) AS running_total
FROM employees;


34. Difference between each employeeâ€™s salary and dept average.

SELECT emp_name, dept_id, salary,
       salary - AVG(salary) OVER (PARTITION BY dept_id) AS diff_from_avg
FROM employees;


35. Find cumulative average salary.

SELECT emp_name, salary,
       AVG(salary) OVER (ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cum_avg
FROM employees;

ðŸ”¹ Miscellaneous Interview Favourites

36. Find employees who joined in last 30 days.

SELECT emp_name, hire_date
FROM employees
WHERE hire_date >= CURRENT_DATE - INTERVAL '30' DAY;


37. Find employees whose name starts with â€˜Aâ€™.

SELECT emp_name FROM employees WHERE emp_name LIKE 'A%';


38. Find employees whose name contains â€˜sonâ€™.

SELECT emp_name FROM employees WHERE emp_name LIKE '%son%';


39. Find employees with NULL department.

SELECT emp_name FROM employees WHERE dept_id IS NULL;


40. Update salary of employees in dept 10 by 10%.

UPDATE employees
SET salary = salary * 1.1
WHERE dept_id = 10;


41. Delete employees with salary < 20000.

DELETE FROM employees
WHERE salary < 20000;


42. Find duplicate employee names.

SELECT emp_name, COUNT(*)
FROM employees
GROUP BY emp_name
HAVING COUNT(*) > 1;


43. Find employees working in more than 1 project.

SELECT emp_id, COUNT(project_id)
FROM project_assignments
GROUP BY emp_id
HAVING COUNT(project_id) > 1;


44.
.

SELECT dept_id
FROM employees
GROUP BY dept_id
HAVING MIN(salary) > 40000;


45. Find department where max salary < 60000.

SELECT dept_id
FROM employees
GROUP BY dept_id
HAVING MAX(salary) < 60000;


46. Get employee with earliest hire date.

SELECT emp_name, hire_date
FROM employees
ORDER BY hire_date ASC
LIMIT 1;


47. Find total employees and avg salary company-wide.

SELECT COUNT(*) AS total_employees, AVG(salary) AS avg_salary
FROM employees;


48. Find percentage contribution of each employeeâ€™s salary.

SELECT emp_name, salary,
       (salary / SUM(salary) OVER()) * 100 AS percentage
FROM employees;


49. Find employees earning more than their manager.

SELECT e.emp_name, e.salary, m.emp_name AS manager, m.salary AS mgr_salary
FROM employees e
JOIN employees m ON e.manager_id = m.emp_id
WHERE e.salary > m.salary;


50. Find employee(s) with second lowest salary.

SELECT DISTINCT salary
FROM employees e1
WHERE 2 = (
  SELECT COUNT(DISTINCT salary)
  FROM employees e2
  WHERE e2.salary <= e1.salary
);