1.Question-SQL query retrieves the second-highest salary from the employee table.
Answer-SELECT MAX(salary)
       FROM employee
       WHERE salary < (SELECT MAX(salary) FROM employee);

       or  select  age as secondMaxAge  from employee
              order by age DESC
              limit 1 offset 1;  Skips the top 1, fetches the 2nd(1st we sort the data based on decending after that
                                                                   skip 1 record so
or
select * from employee;
select distinct salary from employee
order by salary desc
limit 1,1;

2. ACID properties with example
Answer-Atomicity â€“ A transaction is treated as a single unit, meaning it either completes fully or does not happen
                      at all. If any part of the transaction fails, the entire transaction is rolled back.
       Example: In a bank transfer, if money is debited from one account but not credited to another due to a failure,
        the transaction is rolled back.

       Consistency â€“ The database remains in a valid state before and after the transaction. It ensures that a
       transaction transforms the database from one valid state to another, maintaining constraints and rules.
         Example:  Banking System
                  Suppose you have a bank database with an account balance table. The rule (constraint)
                  is that an account balance cannot be negative.

                  Scenario: Transferring â‚¹500 from Account A to Account B
                  The transaction starts.
                  â‚¹500 is deducted from Account A.
                  â‚¹500 is added to Account B.
                  If Account A does not have enough balance (e.g., â‚¹300), the transaction fails.
                  Since the transaction violates the constraint (balance â‰¥ 0), the database rolls back to its previous state, ensuring consistency.
                  ðŸ’¡ Without Consistency, Account A could go negative, leading to incorrect data in the database.

       Isolation â€“ Transactions are executed independently, ensuring that concurrent transactions do not interfere
       with each other. Different isolation levels (READ COMMITTED, REPEATABLE READ, SERIALIZABLE) control how
       transactions interact.
       Example: If two users are booking the last seat on a flight at the same time, isolation ensures that only
       one transaction succeeds.
        This prevents race conditions and maintains data integrity.



       Durability â€“ Once a transaction is committed, it remains permanent in the database, even in case of system
        failures (e.g., power loss, crashes).
       Example: If a system crashes after committing a transaction, the data remains safe when the system restarts.
       Scenario: Fixed Deposit in a Bank
       You open a Fixed Deposit (FD) account in your bank and deposit â‚¹1,00,000.
       The bank's system commits the transaction and updates the database.
       Right after the transaction, the bank server crashes or power goes off.
       When the system restarts, your deposit must still exist.

       Where ACID Properties Are Used
       Relational Databases (RDBMS) like MySQL, PostgreSQL, Oracle, and SQL Server follow ACID to ensure data
       integrity.
       Transactional Systems like banking, e-commerce, and financial applications rely on ACID compliance for
       correctness.


3. Write a query to retrieve employees who earn more than the average salary.
   select * from employee
   where salary > (select Avg(salary) from employee);

4.   -- Write a query to fetch the duplicate age  from a column in a table. and also count
       select age  ,count(*)
       from employee
       group by age
       having count(*)>1;

5. Write a query to fetch top 3 earning employees.
       SELECT *
       FROM Employee
       ORDER BY Salary DESC
       LIMIT 3;

6. sum and avg of each department
select department, sum(salary) as total_sum, avg(salary) as avg_salary
from employee
group by department;

7. highest salary per department:
    SELECT d.department_name, e.name, e.salary
    FROM employees e
    JOIN departments d ON e.department_id = d.id
    WHERE e.salary = (
        SELECT MAX(salary)
        FROM employees
        WHERE department_id = e.department_id
    );


8.Departments with No Employees
   SELECT d.department_name
   FROM departments d
   LEFT JOIN employees e ON d.id = e.department_id
   WHERE e.id IS NULL;

9. Employees Earning Above Average Salary
    SELECT name, salary
    FROM employees
    WHERE salary > (SELECT AVG(salary) FROM employees);

10. Get employees whose salary is above department average
   SELECT e.*
   FROM employees e
   JOIN (
       SELECT department_id, AVG(salary) AS dept_avg
       FROM employees
       GROUP BY department_id
   ) avg_table
   ON e.department_id = avg_table.department_id
   WHERE e.salary > avg_table.dept_avg;

    OR

     SELECT d.department_name, e.name, e.salary
        FROM employees e
        JOIN departments d ON e.department_id = d.id
        WHERE e.salary > (
            SELECT AVG(salary)
            FROM employees
            WHERE department_id = e.department_id
        );


